class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        # 双指针 + 贪心算法
        # 对于字符串 s 中的每个字符，尽量匹配 t 中靠前的字符
        # 时间复杂度O(n1 + n2)，空间复杂度O(1)
        """
        进阶要求思路分析：
            如果有大量输入的 S，称作S1, S2, ... , Sk 其中 k >= 10亿，
            你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？
        思路分析：
            1.思路一：
                将 T 的所有子序列检索出来，如果用动态规划来求得的话，时间复杂度 O(n)，空间复杂度 O(T.length!)；
                最后可能还需要一个哈希表将所有序列存起来，方便检索；
            2.思路二：
                题目给出字符串中只包含26个英文字母，那么只需要将26个字母存在一个哈希表中，然后将对应的在 T 当中的索引存入，
                这样一来 S 可以直接通过索引存在与否，来判定是否是 T 的子序列。
                具体而言，从头到尾检索 S 中的每个字符：
                    如果字符存在于哈希表中，那么记录该字符在哈希表中对应的值最小的索引，继续检索下一个字符；
                    如果下一个字符的索引值可以大于当前记录的，上一个字符的索引值，那么继续，直到检索结束；
                    如果检索不到字符串，或者索引不符合递增的要求，那么当前字符串不是 T 的子串。
        """
        i, j = 0, 0
        n1, n2 = len(s), len(t)
        while i < n1 and j < n2:
            if s[i] == t[j]:
                i += 1
                j += 1
            else:
                j += 1
        return i == len(s)